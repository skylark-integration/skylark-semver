{"version":3,"sources":["skylark-semver-all.js"],"names":["define","obj1","path","obj2","split","length","ns","i","name","_attach","skylark","attach","obj","main","exports","module","SemVer","SEMVER_SPEC_VERSION","re","src","R","NUMERICIDENTIFIER","NUMERICIDENTIFIERLOOSE","NONNUMERICIDENTIFIER","MAINVERSION","MAINVERSIONLOOSE","PRERELEASEIDENTIFIER","PRERELEASEIDENTIFIERLOOSE","PRERELEASE","PRERELEASELOOSE","BUILDIDENTIFIER","BUILD","FULL","FULLPLAIN","LOOSEPLAIN","LOOSE","GTLT","XRANGEIDENTIFIERLOOSE","XRANGEIDENTIFIER","XRANGEPLAIN","XRANGEPLAINLOOSE","XRANGE","XRANGELOOSE","LONETILDE","TILDETRIM","RegExp","TILDE","TILDELOOSE","LONECARET","CARETTRIM","CARET","CARETLOOSE","COMPARATORLOOSE","COMPARATOR","COMPARATORTRIM","HYPHENRANGE","HYPHENRANGELOOSE","STAR","parse","version","loose","r","test","TypeError","this","m","trim","match","raw","major","minor","patch","prerelease","map","id","build","format","valid","v","clean","s","prototype","join","inspect","toString","compare","other","compareMain","comparePre","compareIdentifiers","a","b","undefined","inc","release","push","Error","er","numeric","anum","bnum","rcompare","gt","lt","eq","neq","gte","lte","cmp","op","ret","Comparator","comp","value","semver","ANY","operator","rcompareIdentifiers","compareLoose","sort","list","rsort","Range","range","set","parseRange","filter","c","isX","toLowerCase","hyphenReplace","$0","from","fM","fm","fp","fpr","fb","to","tM","tm","tp","tpr","tb","testSet","satisfies","outside","hilo","gtfn","ltefn","ltfn","ecomp","comparators","high","low","forEach","comparator","comps","hr","replace","compRe","replaceStars","gtlt","M","p","pr","xM","xm","xp","anyX","replaceXRange","replaceXRanges","_","charAt","replaceTilde","replaceTildes","replaceCaret","replaceCarets","parseComparator","toComparators","maxSatisfying","versions","validRange","ltr","gtr"],"mappings":"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","file":"../skylark-semver-all.js","sourcesContent":["define('skylark-langx-ns/_attach',[],function(){\r\n    return  function attach(obj1,path,obj2) {\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length,\r\n            ns=obj1,\r\n            i=0,\r\n            name = path[i++];\r\n\r\n        while (i < length) {\r\n            ns = ns[name] = ns[name] || {};\r\n            name = path[i++];\r\n        }\r\n\r\n        return ns[name] = obj2;\r\n    }\r\n});\ndefine('skylark-langx-ns/ns',[\r\n    \"./_attach\"\r\n], function(_attach) {\r\n    var skylark = {\r\n    \tattach : function(path,obj) {\r\n    \t\treturn _attach(skylark,path,obj);\r\n    \t}\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx-ns/main',[\r\n\t\"./ns\"\r\n],function(skylark){\r\n\treturn skylark;\r\n});\ndefine('skylark-langx-ns', ['skylark-langx-ns/main'], function (main) { return main; });\n\ndefine('skylark-langx/skylark',[\r\n    \"skylark-langx-ns\"\r\n], function(ns) {\r\n\treturn ns;\r\n});\r\n\ndefine('skylark-semver/SemVer',[\r\n  \"skylark-langx/skylark\"\r\n],function(skylark){\r\n   var exports = module.exports = SemVer;\r\n\r\n  // The debug function is excluded entirely from the minified version.\r\n\r\n  // Note: this is the semver.org version of the spec that it implements\r\n  // Not necessarily the package version of this code.\r\n  exports.SEMVER_SPEC_VERSION = '2.0.0';\r\n\r\n  // The actual regexps go on exports.re\r\n  var re = exports.re = [];\r\n  var src = exports.src = [];\r\n  var R = 0;\r\n\r\n  // The following Regular Expressions can be used for tokenizing,\r\n  // validating, and parsing SemVer version strings.\r\n\r\n  // ## Numeric Identifier\r\n  // A single `0`, or a non-zero digit followed by zero or more digits.\r\n\r\n  var NUMERICIDENTIFIER = R++;\r\n  src[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';\r\n  var NUMERICIDENTIFIERLOOSE = R++;\r\n  src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';\r\n\r\n\r\n  // ## Non-numeric Identifier\r\n  // Zero or more digits, followed by a letter or hyphen, and then zero or\r\n  // more letters, digits, or hyphens.\r\n\r\n  var NONNUMERICIDENTIFIER = R++;\r\n  src[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';\r\n\r\n\r\n  // ## Main Version\r\n  // Three dot-separated numeric identifiers.\r\n\r\n  var MAINVERSION = R++;\r\n  src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\r\n                     '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\r\n                     '(' + src[NUMERICIDENTIFIER] + ')';\r\n\r\n  var MAINVERSIONLOOSE = R++;\r\n  src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\r\n                          '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\r\n                          '(' + src[NUMERICIDENTIFIERLOOSE] + ')';\r\n\r\n  // ## Pre-release Version Identifier\r\n  // A numeric identifier, or a non-numeric identifier.\r\n\r\n  var PRERELEASEIDENTIFIER = R++;\r\n  src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +\r\n                              '|' + src[NONNUMERICIDENTIFIER] + ')';\r\n\r\n  var PRERELEASEIDENTIFIERLOOSE = R++;\r\n  src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +\r\n                                   '|' + src[NONNUMERICIDENTIFIER] + ')';\r\n\r\n\r\n  // ## Pre-release Version\r\n  // Hyphen, followed by one or more dot-separated pre-release version\r\n  // identifiers.\r\n\r\n  var PRERELEASE = R++;\r\n  src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +\r\n                    '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))';\r\n\r\n  var PRERELEASELOOSE = R++;\r\n  src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +\r\n                         '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';\r\n\r\n  // ## Build Metadata Identifier\r\n  // Any combination of digits, letters, or hyphens.\r\n\r\n  var BUILDIDENTIFIER = R++;\r\n  src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';\r\n\r\n  // ## Build Metadata\r\n  // Plus sign, followed by one or more period-separated build metadata\r\n  // identifiers.\r\n\r\n  var BUILD = R++;\r\n  src[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +\r\n               '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))';\r\n\r\n\r\n  // ## Full Version String\r\n  // A main version, followed optionally by a pre-release version and\r\n  // build metadata.\r\n\r\n  // Note that the only major, minor, patch, and pre-release sections of\r\n  // the version string are capturing groups.  The build metadata is not a\r\n  // capturing group, because it should not ever be used in version\r\n  // comparison.\r\n\r\n  var FULL = R++;\r\n  var FULLPLAIN = 'v?' + src[MAINVERSION] +\r\n                  src[PRERELEASE] + '?' +\r\n                  src[BUILD] + '?';\r\n\r\n  src[FULL] = '^' + FULLPLAIN + '$';\r\n\r\n  // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\r\n  // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\r\n  // common in the npm registry.\r\n  var LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +\r\n                   src[PRERELEASELOOSE] + '?' +\r\n                   src[BUILD] + '?';\r\n\r\n  var LOOSE = R++;\r\n  src[LOOSE] = '^' + LOOSEPLAIN + '$';\r\n\r\n  var GTLT = R++;\r\n  src[GTLT] = '((?:<|>)?=?)';\r\n\r\n  // Something like \"2.*\" or \"1.2.x\".\r\n  // Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\r\n  // Only the first item is strictly required.\r\n  var XRANGEIDENTIFIERLOOSE = R++;\r\n  src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';\r\n  var XRANGEIDENTIFIER = R++;\r\n  src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*';\r\n\r\n  var XRANGEPLAIN = R++;\r\n  src[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +\r\n                     '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\r\n                     '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\r\n                     '(?:(' + src[PRERELEASE] + ')' +\r\n                     ')?)?)?';\r\n\r\n  var XRANGEPLAINLOOSE = R++;\r\n  src[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\r\n                          '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\r\n                          '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\r\n                          '(?:(' + src[PRERELEASELOOSE] + ')' +\r\n                          ')?)?)?';\r\n\r\n  // >=2.x, for example, means >=2.0.0-0\r\n  // <1.x would be the same as \"<1.0.0-0\", though.\r\n  var XRANGE = R++;\r\n  src[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$';\r\n  var XRANGELOOSE = R++;\r\n  src[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$';\r\n\r\n  // Tilde ranges.\r\n  // Meaning is \"reasonably at or greater than\"\r\n  var LONETILDE = R++;\r\n  src[LONETILDE] = '(?:~>?)';\r\n\r\n  var TILDETRIM = R++;\r\n  src[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+';\r\n  re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');\r\n  var tildeTrimReplace = '$1~';\r\n\r\n  var TILDE = R++;\r\n  src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';\r\n  var TILDELOOSE = R++;\r\n  src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';\r\n\r\n  // Caret ranges.\r\n  // Meaning is \"at least and backwards compatible with\"\r\n  var LONECARET = R++;\r\n  src[LONECARET] = '(?:\\\\^)';\r\n\r\n  var CARETTRIM = R++;\r\n  src[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+';\r\n  re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');\r\n  var caretTrimReplace = '$1^';\r\n\r\n  var CARET = R++;\r\n  src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';\r\n  var CARETLOOSE = R++;\r\n  src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';\r\n\r\n  // A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\r\n  var COMPARATORLOOSE = R++;\r\n  src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$';\r\n  var COMPARATOR = R++;\r\n  src[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$';\r\n\r\n\r\n  // An expression to strip any whitespace between the gtlt and the thing\r\n  // it modifies, so that `> 1.2.3` ==> `>1.2.3`\r\n  var COMPARATORTRIM = R++;\r\n  src[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +\r\n                        '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';\r\n\r\n  // this one has to use the /g flag\r\n  re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');\r\n  var comparatorTrimReplace = '$1$2$3';\r\n\r\n\r\n  // Something like `1.2.3 - 1.2.4`\r\n  // Note that these all use the loose form, because they'll be\r\n  // checked against either the strict or loose comparator form\r\n  // later.\r\n  var HYPHENRANGE = R++;\r\n  src[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +\r\n                     '\\\\s+-\\\\s+' +\r\n                     '(' + src[XRANGEPLAIN] + ')' +\r\n                     '\\\\s*$';\r\n\r\n  var HYPHENRANGELOOSE = R++;\r\n  src[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +\r\n                          '\\\\s+-\\\\s+' +\r\n                          '(' + src[XRANGEPLAINLOOSE] + ')' +\r\n                          '\\\\s*$';\r\n\r\n  // Star ranges basically just allow anything at all.\r\n  var STAR = R++;\r\n  src[STAR] = '(<|>)?=?\\\\s*\\\\*';\r\n\r\n  // Compile to actual regexp objects.\r\n  // All are flag-free, unless they were created above with a flag.\r\n  for (var i = 0; i < R; i++) {\r\n    ;\r\n    if (!re[i])\r\n      re[i] = new RegExp(src[i]);\r\n  }\r\n\r\n  exports.parse = parse;\r\n  function parse(version, loose) {\r\n    var r = loose ? re[LOOSE] : re[FULL];\r\n    return (r.test(version)) ? new SemVer(version, loose) : null;\r\n  }\r\n\r\n  exports.valid = valid;\r\n  function valid(version, loose) {\r\n    var v = parse(version, loose);\r\n    return v ? v.version : null;\r\n  }\r\n\r\n\r\n  exports.clean = clean;\r\n  function clean(version, loose) {\r\n    var s = parse(version, loose);\r\n    return s ? s.version : null;\r\n  }\r\n\r\n  exports.SemVer = SemVer;\r\n\r\n  function SemVer(version, loose) {\r\n    if (version instanceof SemVer) {\r\n      if (version.loose === loose)\r\n        return version;\r\n      else\r\n        version = version.version;\r\n    } else if (typeof version !== 'string') {\r\n      throw new TypeError('Invalid Version: ' + version);\r\n    }\r\n\r\n    if (!(this instanceof SemVer))\r\n      return new SemVer(version, loose);\r\n\r\n    ;\r\n    this.loose = loose;\r\n    var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);\r\n\r\n    if (!m)\r\n      throw new TypeError('Invalid Version: ' + version);\r\n\r\n    this.raw = version;\r\n\r\n    // these are actually numbers\r\n    this.major = +m[1];\r\n    this.minor = +m[2];\r\n    this.patch = +m[3];\r\n\r\n    // numberify any prerelease numeric ids\r\n    if (!m[4])\r\n      this.prerelease = [];\r\n    else\r\n      this.prerelease = m[4].split('.').map(function(id) {\r\n        return (/^[0-9]+$/.test(id)) ? +id : id;\r\n      });\r\n\r\n    this.build = m[5] ? m[5].split('.') : [];\r\n    this.format();\r\n  }\r\n\r\n  SemVer.prototype.format = function() {\r\n    this.version = this.major + '.' + this.minor + '.' + this.patch;\r\n    if (this.prerelease.length)\r\n      this.version += '-' + this.prerelease.join('.');\r\n    return this.version;\r\n  };\r\n\r\n  SemVer.prototype.inspect = function() {\r\n    return '<SemVer \"' + this + '\">';\r\n  };\r\n\r\n  SemVer.prototype.toString = function() {\r\n    return this.version;\r\n  };\r\n\r\n  SemVer.prototype.compare = function(other) {\r\n    ;\r\n    if (!(other instanceof SemVer))\r\n      other = new SemVer(other, this.loose);\r\n\r\n    return this.compareMain(other) || this.comparePre(other);\r\n  };\r\n\r\n  SemVer.prototype.compareMain = function(other) {\r\n    if (!(other instanceof SemVer))\r\n      other = new SemVer(other, this.loose);\r\n\r\n    return compareIdentifiers(this.major, other.major) ||\r\n           compareIdentifiers(this.minor, other.minor) ||\r\n           compareIdentifiers(this.patch, other.patch);\r\n  };\r\n\r\n  SemVer.prototype.comparePre = function(other) {\r\n    if (!(other instanceof SemVer))\r\n      other = new SemVer(other, this.loose);\r\n\r\n    // NOT having a prerelease is > having one\r\n    if (this.prerelease.length && !other.prerelease.length)\r\n      return -1;\r\n    else if (!this.prerelease.length && other.prerelease.length)\r\n      return 1;\r\n    else if (!this.prerelease.length && !other.prerelease.length)\r\n      return 0;\r\n\r\n    var i = 0;\r\n    do {\r\n      var a = this.prerelease[i];\r\n      var b = other.prerelease[i];\r\n      ;\r\n      if (a === undefined && b === undefined)\r\n        return 0;\r\n      else if (b === undefined)\r\n        return 1;\r\n      else if (a === undefined)\r\n        return -1;\r\n      else if (a === b)\r\n        continue;\r\n      else\r\n        return compareIdentifiers(a, b);\r\n    } while (++i);\r\n  };\r\n\r\n  // preminor will bump the version up to the next minor release, and immediately\r\n  // down to pre-release. premajor and prepatch work the same way.\r\n  SemVer.prototype.inc = function(release) {\r\n    switch (release) {\r\n      case 'premajor':\r\n        this.inc('major');\r\n        this.inc('pre');\r\n        break;\r\n      case 'preminor':\r\n        this.inc('minor');\r\n        this.inc('pre');\r\n        break;\r\n      case 'prepatch':\r\n        // If this is already a prerelease, it will bump to the next version\r\n        // drop any prereleases that might already exist, since they are not\r\n        // relevant at this point.\r\n        this.prerelease.length = 0\r\n        this.inc('patch');\r\n        this.inc('pre');\r\n        break;\r\n      // If the input is a non-prerelease version, this acts the same as\r\n      // prepatch.\r\n      case 'prerelease':\r\n        if (this.prerelease.length === 0)\r\n          this.inc('patch');\r\n        this.inc('pre');\r\n        break;\r\n      case 'major':\r\n        this.major++;\r\n        this.minor = -1;\r\n      case 'minor':\r\n        this.minor++;\r\n        this.patch = 0;\r\n        this.prerelease = [];\r\n        break;\r\n      case 'patch':\r\n        // If this is not a pre-release version, it will increment the patch.\r\n        // If it is a pre-release it will bump up to the same patch version.\r\n        // 1.2.0-5 patches to 1.2.0\r\n        // 1.2.0 patches to 1.2.1\r\n        if (this.prerelease.length === 0)\r\n          this.patch++;\r\n        this.prerelease = [];\r\n        break;\r\n      // This probably shouldn't be used publically.\r\n      // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\r\n      case 'pre':\r\n        if (this.prerelease.length === 0)\r\n          this.prerelease = [0];\r\n        else {\r\n          var i = this.prerelease.length;\r\n          while (--i >= 0) {\r\n            if (typeof this.prerelease[i] === 'number') {\r\n              this.prerelease[i]++;\r\n              i = -2;\r\n            }\r\n          }\r\n          if (i === -1) // didn't increment anything\r\n            this.prerelease.push(0);\r\n        }\r\n        break;\r\n\r\n      default:\r\n        throw new Error('invalid increment argument: ' + release);\r\n    }\r\n    this.format();\r\n    return this;\r\n  };\r\n\r\n  exports.inc = inc;\r\n  function inc(version, release, loose) {\r\n    try {\r\n      return new SemVer(version, loose).inc(release).version;\r\n    } catch (er) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  exports.compareIdentifiers = compareIdentifiers;\r\n\r\n  var numeric = /^[0-9]+$/;\r\n  function compareIdentifiers(a, b) {\r\n    var anum = numeric.test(a);\r\n    var bnum = numeric.test(b);\r\n\r\n    if (anum && bnum) {\r\n      a = +a;\r\n      b = +b;\r\n    }\r\n\r\n    return (anum && !bnum) ? -1 :\r\n           (bnum && !anum) ? 1 :\r\n           a < b ? -1 :\r\n           a > b ? 1 :\r\n           0;\r\n  }\r\n\r\n  exports.rcompareIdentifiers = rcompareIdentifiers;\r\n  function rcompareIdentifiers(a, b) {\r\n    return compareIdentifiers(b, a);\r\n  }\r\n\r\n  exports.compare = compare;\r\n  function compare(a, b, loose) {\r\n    return new SemVer(a, loose).compare(b);\r\n  }\r\n\r\n  exports.compareLoose = compareLoose;\r\n  function compareLoose(a, b) {\r\n    return compare(a, b, true);\r\n  }\r\n\r\n  exports.rcompare = rcompare;\r\n  function rcompare(a, b, loose) {\r\n    return compare(b, a, loose);\r\n  }\r\n\r\n  exports.sort = sort;\r\n  function sort(list, loose) {\r\n    return list.sort(function(a, b) {\r\n      return exports.compare(a, b, loose);\r\n    });\r\n  }\r\n\r\n  exports.rsort = rsort;\r\n  function rsort(list, loose) {\r\n    return list.sort(function(a, b) {\r\n      return exports.rcompare(a, b, loose);\r\n    });\r\n  }\r\n\r\n  exports.gt = gt;\r\n  function gt(a, b, loose) {\r\n    return compare(a, b, loose) > 0;\r\n  }\r\n\r\n  exports.lt = lt;\r\n  function lt(a, b, loose) {\r\n    return compare(a, b, loose) < 0;\r\n  }\r\n\r\n  exports.eq = eq;\r\n  function eq(a, b, loose) {\r\n    return compare(a, b, loose) === 0;\r\n  }\r\n\r\n  exports.neq = neq;\r\n  function neq(a, b, loose) {\r\n    return compare(a, b, loose) !== 0;\r\n  }\r\n\r\n  exports.gte = gte;\r\n  function gte(a, b, loose) {\r\n    return compare(a, b, loose) >= 0;\r\n  }\r\n\r\n  exports.lte = lte;\r\n  function lte(a, b, loose) {\r\n    return compare(a, b, loose) <= 0;\r\n  }\r\n\r\n  exports.cmp = cmp;\r\n  function cmp(a, op, b, loose) {\r\n    var ret;\r\n    switch (op) {\r\n      case '===': ret = a === b; break;\r\n      case '!==': ret = a !== b; break;\r\n      case '': case '=': case '==': ret = eq(a, b, loose); break;\r\n      case '!=': ret = neq(a, b, loose); break;\r\n      case '>': ret = gt(a, b, loose); break;\r\n      case '>=': ret = gte(a, b, loose); break;\r\n      case '<': ret = lt(a, b, loose); break;\r\n      case '<=': ret = lte(a, b, loose); break;\r\n      default: throw new TypeError('Invalid operator: ' + op);\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  exports.Comparator = Comparator;\r\n  function Comparator(comp, loose) {\r\n    if (comp instanceof Comparator) {\r\n      if (comp.loose === loose)\r\n        return comp;\r\n      else\r\n        comp = comp.value;\r\n    }\r\n\r\n    if (!(this instanceof Comparator))\r\n      return new Comparator(comp, loose);\r\n\r\n    ;\r\n    this.loose = loose;\r\n    this.parse(comp);\r\n\r\n    if (this.semver === ANY)\r\n      this.value = '';\r\n    else\r\n      this.value = this.operator + this.semver.version;\r\n  }\r\n\r\n  var ANY = {};\r\n  Comparator.prototype.parse = function(comp) {\r\n    var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\r\n    var m = comp.match(r);\r\n\r\n    if (!m)\r\n      throw new TypeError('Invalid comparator: ' + comp);\r\n\r\n    this.operator = m[1];\r\n    if (this.operator === '=')\r\n      this.operator = '';\r\n\r\n    // if it literally is just '>' or '' then allow anything.\r\n    if (!m[2])\r\n      this.semver = ANY;\r\n    else {\r\n      this.semver = new SemVer(m[2], this.loose);\r\n\r\n      // <1.2.3-rc DOES allow 1.2.3-beta (has prerelease)\r\n      // >=1.2.3 DOES NOT allow 1.2.3-beta\r\n      // <=1.2.3 DOES allow 1.2.3-beta\r\n      // However, <1.2.3 does NOT allow 1.2.3-beta,\r\n      // even though `1.2.3-beta < 1.2.3`\r\n      // The assumption is that the 1.2.3 version has something you\r\n      // *don't* want, so we push the prerelease down to the minimum.\r\n      if (this.operator === '<' && !this.semver.prerelease.length) {\r\n        this.semver.prerelease = ['0'];\r\n        this.semver.format();\r\n      }\r\n    }\r\n  };\r\n\r\n  Comparator.prototype.inspect = function() {\r\n    return '<SemVer Comparator \"' + this + '\">';\r\n  };\r\n\r\n  Comparator.prototype.toString = function() {\r\n    return this.value;\r\n  };\r\n\r\n  Comparator.prototype.test = function(version) {\r\n    ;\r\n    return (this.semver === ANY) ? true :\r\n           cmp(version, this.operator, this.semver, this.loose);\r\n  };\r\n\r\n\r\n  exports.Range = Range;\r\n  function Range(range, loose) {\r\n    if ((range instanceof Range) && range.loose === loose)\r\n      return range;\r\n\r\n    if (!(this instanceof Range))\r\n      return new Range(range, loose);\r\n\r\n    this.loose = loose;\r\n\r\n    // First, split based on boolean or ||\r\n    this.raw = range;\r\n    this.set = range.split(/\\s*\\|\\|\\s*/).map(function(range) {\r\n      return this.parseRange(range.trim());\r\n    }, this).filter(function(c) {\r\n      // throw out any that are not relevant for whatever reason\r\n      return c.length;\r\n    });\r\n\r\n    if (!this.set.length) {\r\n      throw new TypeError('Invalid SemVer Range: ' + range);\r\n    }\r\n\r\n    this.format();\r\n  }\r\n\r\n  Range.prototype.inspect = function() {\r\n    return '<SemVer Range \"' + this.range + '\">';\r\n  };\r\n\r\n  Range.prototype.format = function() {\r\n    this.range = this.set.map(function(comps) {\r\n      return comps.join(' ').trim();\r\n    }).join('||').trim();\r\n    return this.range;\r\n  };\r\n\r\n  Range.prototype.toString = function() {\r\n    return this.range;\r\n  };\r\n\r\n  Range.prototype.parseRange = function(range) {\r\n    var loose = this.loose;\r\n    range = range.trim();\r\n    ;\r\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\r\n    var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];\r\n    range = range.replace(hr, hyphenReplace);\r\n    ;\r\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\r\n    range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);\r\n    ;\r\n\r\n    // `~ 1.2.3` => `~1.2.3`\r\n    range = range.replace(re[TILDETRIM], tildeTrimReplace);\r\n\r\n    // `^ 1.2.3` => `^1.2.3`\r\n    range = range.replace(re[CARETTRIM], caretTrimReplace);\r\n\r\n    // normalize spaces\r\n    range = range.split(/\\s+/).join(' ');\r\n\r\n    // At this point, the range is completely trimmed and\r\n    // ready to be split into comparators.\r\n\r\n    var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\r\n    var set = range.split(' ').map(function(comp) {\r\n      return parseComparator(comp, loose);\r\n    }).join(' ').split(/\\s+/);\r\n    if (this.loose) {\r\n      // in loose mode, throw out any that are not valid comparators\r\n      set = set.filter(function(comp) {\r\n        return !!comp.match(compRe);\r\n      });\r\n    }\r\n    set = set.map(function(comp) {\r\n      return new Comparator(comp, loose);\r\n    });\r\n\r\n    return set;\r\n  };\r\n\r\n  // Mostly just for testing and legacy API reasons\r\n  exports.toComparators = toComparators;\r\n  function toComparators(range, loose) {\r\n    return new Range(range, loose).set.map(function(comp) {\r\n      return comp.map(function(c) {\r\n        return c.value;\r\n      }).join(' ').trim().split(' ');\r\n    });\r\n  }\r\n\r\n  // comprised of xranges, tildes, stars, and gtlt's at this point.\r\n  // already replaced the hyphen ranges\r\n  // turn into a set of JUST comparators.\r\n  function parseComparator(comp, loose) {\r\n    ;\r\n    comp = replaceCarets(comp, loose);\r\n    ;\r\n    comp = replaceTildes(comp, loose);\r\n    ;\r\n    comp = replaceXRanges(comp, loose);\r\n    ;\r\n    comp = replaceStars(comp, loose);\r\n    ;\r\n    return comp;\r\n  }\r\n\r\n  function isX(id) {\r\n    return !id || id.toLowerCase() === 'x' || id === '*';\r\n  }\r\n\r\n  // ~, ~> --> * (any, kinda silly)\r\n  // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\r\n  // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\r\n  // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\r\n  // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\r\n  // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\r\n  function replaceTildes(comp, loose) {\r\n    return comp.trim().split(/\\s+/).map(function(comp) {\r\n      return replaceTilde(comp, loose);\r\n    }).join(' ');\r\n  }\r\n\r\n  function replaceTilde(comp, loose) {\r\n    var r = loose ? re[TILDELOOSE] : re[TILDE];\r\n    return comp.replace(r, function(_, M, m, p, pr) {\r\n      ;\r\n      var ret;\r\n\r\n      if (isX(M))\r\n        ret = '';\r\n      else if (isX(m))\r\n        ret = '>=' + M + '.0.0-0 <' + (+M + 1) + '.0.0-0';\r\n      else if (isX(p))\r\n        // ~1.2 == >=1.2.0- <1.3.0-\r\n        ret = '>=' + M + '.' + m + '.0-0 <' + M + '.' + (+m + 1) + '.0-0';\r\n      else if (pr) {\r\n        ;\r\n        if (pr.charAt(0) !== '-')\r\n          pr = '-' + pr;\r\n        ret = '>=' + M + '.' + m + '.' + p + pr +\r\n              ' <' + M + '.' + (+m + 1) + '.0-0';\r\n      } else\r\n        // ~1.2.3 == >=1.2.3-0 <1.3.0-0\r\n        ret = '>=' + M + '.' + m + '.' + p + '-0' +\r\n              ' <' + M + '.' + (+m + 1) + '.0-0';\r\n\r\n      ;\r\n      return ret;\r\n    });\r\n  }\r\n\r\n  // ^ --> * (any, kinda silly)\r\n  // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\r\n  // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\r\n  // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\r\n  // ^1.2.3 --> >=1.2.3 <2.0.0\r\n  // ^1.2.0 --> >=1.2.0 <2.0.0\r\n  function replaceCarets(comp, loose) {\r\n    return comp.trim().split(/\\s+/).map(function(comp) {\r\n      return replaceCaret(comp, loose);\r\n    }).join(' ');\r\n  }\r\n\r\n  function replaceCaret(comp, loose) {\r\n    var r = loose ? re[CARETLOOSE] : re[CARET];\r\n    return comp.replace(r, function(_, M, m, p, pr) {\r\n      ;\r\n      var ret;\r\n\r\n      if (isX(M))\r\n        ret = '';\r\n      else if (isX(m))\r\n        ret = '>=' + M + '.0.0-0 <' + (+M + 1) + '.0.0-0';\r\n      else if (isX(p)) {\r\n        if (M === '0')\r\n          ret = '>=' + M + '.' + m + '.0-0 <' + M + '.' + (+m + 1) + '.0-0';\r\n        else\r\n          ret = '>=' + M + '.' + m + '.0-0 <' + (+M + 1) + '.0.0-0';\r\n      } else if (pr) {\r\n        ;\r\n        if (pr.charAt(0) !== '-')\r\n          pr = '-' + pr;\r\n        if (M === '0') {\r\n          if (m === '0')\r\n            ret = '=' + M + '.' + m + '.' + p + pr;\r\n          else\r\n            ret = '>=' + M + '.' + m + '.' + p + pr +\r\n                  ' <' + M + '.' + (+m + 1) + '.0-0';\r\n        } else\r\n          ret = '>=' + M + '.' + m + '.' + p + pr +\r\n                ' <' + (+M + 1) + '.0.0-0';\r\n      } else {\r\n        if (M === '0') {\r\n          if (m === '0')\r\n            ret = '=' + M + '.' + m + '.' + p;\r\n          else\r\n            ret = '>=' + M + '.' + m + '.' + p + '-0' +\r\n                  ' <' + M + '.' + (+m + 1) + '.0-0';\r\n        } else\r\n          ret = '>=' + M + '.' + m + '.' + p + '-0' +\r\n                ' <' + (+M + 1) + '.0.0-0';\r\n      }\r\n\r\n      ;\r\n      return ret;\r\n    });\r\n  }\r\n\r\n  function replaceXRanges(comp, loose) {\r\n    ;\r\n    return comp.split(/\\s+/).map(function(comp) {\r\n      return replaceXRange(comp, loose);\r\n    }).join(' ');\r\n  }\r\n\r\n  function replaceXRange(comp, loose) {\r\n    comp = comp.trim();\r\n    var r = loose ? re[XRANGELOOSE] : re[XRANGE];\r\n    return comp.replace(r, function(ret, gtlt, M, m, p, pr) {\r\n      ;\r\n      var xM = isX(M);\r\n      var xm = xM || isX(m);\r\n      var xp = xm || isX(p);\r\n      var anyX = xp;\r\n\r\n      if (gtlt === '=' && anyX)\r\n        gtlt = '';\r\n\r\n      if (gtlt && anyX) {\r\n        // replace X with 0, and then append the -0 min-prerelease\r\n        if (xM)\r\n          M = 0;\r\n        if (xm)\r\n          m = 0;\r\n        if (xp)\r\n          p = 0;\r\n\r\n        if (gtlt === '>') {\r\n          // >1 => >=2.0.0-0\r\n          // >1.2 => >=1.3.0-0\r\n          // >1.2.3 => >= 1.2.4-0\r\n          gtlt = '>=';\r\n          if (xM) {\r\n            // no change\r\n          } else if (xm) {\r\n            M = +M + 1;\r\n            m = 0;\r\n            p = 0;\r\n          } else if (xp) {\r\n            m = +m + 1;\r\n            p = 0;\r\n          }\r\n        }\r\n\r\n\r\n        ret = gtlt + M + '.' + m + '.' + p + '-0';\r\n      } else if (xM) {\r\n        // allow any\r\n        ret = '*';\r\n      } else if (xm) {\r\n        // append '-0' onto the version, otherwise\r\n        // '1.x.x' matches '2.0.0-beta', since the tag\r\n        // *lowers* the version value\r\n        ret = '>=' + M + '.0.0-0 <' + (+M + 1) + '.0.0-0';\r\n      } else if (xp) {\r\n        ret = '>=' + M + '.' + m + '.0-0 <' + M + '.' + (+m + 1) + '.0-0';\r\n      }\r\n\r\n      ;\r\n\r\n      return ret;\r\n    });\r\n  }\r\n\r\n  // Because * is AND-ed with everything else in the comparator,\r\n  // and '' means \"any version\", just remove the *s entirely.\r\n  function replaceStars(comp, loose) {\r\n    ;\r\n    // Looseness is ignored here.  star is always as loose as it gets!\r\n    return comp.trim().replace(re[STAR], '');\r\n  }\r\n\r\n  // This function is passed to string.replace(re[HYPHENRANGE])\r\n  // M, m, patch, prerelease, build\r\n  // 1.2 - 3.4.5 => >=1.2.0-0 <=3.4.5\r\n  // 1.2.3 - 3.4 => >=1.2.0-0 <3.5.0-0 Any 3.4.x will do\r\n  // 1.2 - 3.4 => >=1.2.0-0 <3.5.0-0\r\n  function hyphenReplace($0,\r\n                         from, fM, fm, fp, fpr, fb,\r\n                         to, tM, tm, tp, tpr, tb) {\r\n\r\n    if (isX(fM))\r\n      from = '';\r\n    else if (isX(fm))\r\n      from = '>=' + fM + '.0.0-0';\r\n    else if (isX(fp))\r\n      from = '>=' + fM + '.' + fm + '.0-0';\r\n    else\r\n      from = '>=' + from;\r\n\r\n    if (isX(tM))\r\n      to = '';\r\n    else if (isX(tm))\r\n      to = '<' + (+tM + 1) + '.0.0-0';\r\n    else if (isX(tp))\r\n      to = '<' + tM + '.' + (+tm + 1) + '.0-0';\r\n    else if (tpr)\r\n      to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;\r\n    else\r\n      to = '<=' + to;\r\n\r\n    return (from + ' ' + to).trim();\r\n  }\r\n\r\n\r\n  // if ANY of the sets match ALL of its comparators, then pass\r\n  Range.prototype.test = function(version) {\r\n    if (!version)\r\n      return false;\r\n    for (var i = 0; i < this.set.length; i++) {\r\n      if (testSet(this.set[i], version))\r\n        return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  function testSet(set, version) {\r\n    for (var i = 0; i < set.length; i++) {\r\n      if (!set[i].test(version))\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  exports.satisfies = satisfies;\r\n  function satisfies(version, range, loose) {\r\n    try {\r\n      range = new Range(range, loose);\r\n    } catch (er) {\r\n      return false;\r\n    }\r\n    return range.test(version);\r\n  }\r\n\r\n  exports.maxSatisfying = maxSatisfying;\r\n  function maxSatisfying(versions, range, loose) {\r\n    return versions.filter(function(version) {\r\n      return satisfies(version, range, loose);\r\n    }).sort(function(a, b) {\r\n      return rcompare(a, b, loose);\r\n    })[0] || null;\r\n  }\r\n\r\n  exports.validRange = validRange;\r\n  function validRange(range, loose) {\r\n    try {\r\n      // Return '*' instead of '' so that truthiness works.\r\n      // This will throw if it's invalid anyway\r\n      return new Range(range, loose).range || '*';\r\n    } catch (er) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Determine if version is less than all the versions possible in the range\r\n  exports.ltr = ltr;\r\n  function ltr(version, range, loose) {\r\n    return outside(version, range, '<', loose);\r\n  }\r\n\r\n  // Determine if version is greater than all the versions possible in the range.\r\n  exports.gtr = gtr;\r\n  function gtr(version, range, loose) {\r\n    return outside(version, range, '>', loose);\r\n  }\r\n\r\n  exports.outside = outside;\r\n  function outside(version, range, hilo, loose) {\r\n    version = new SemVer(version, loose);\r\n    range = new Range(range, loose);\r\n\r\n    var gtfn, ltefn, ltfn, comp, ecomp;\r\n    switch (hilo) {\r\n      case '>':\r\n        gtfn = gt;\r\n        ltefn = lte;\r\n        ltfn = lt;\r\n        comp = '>';\r\n        ecomp = '>=';\r\n        break;\r\n      case '<':\r\n        gtfn = lt;\r\n        ltefn = gte;\r\n        ltfn = gt;\r\n        comp = '<';\r\n        ecomp = '<=';\r\n        break;\r\n      default:\r\n        throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\r\n    }\r\n\r\n    // If it satisifes the range it is not outside\r\n    if (satisfies(version, range, loose)) {\r\n      return false;\r\n    }\r\n\r\n    // From now on, variable terms are as if we're in \"gtr\" mode.\r\n    // but note that everything is flipped for the \"ltr\" function.\r\n\r\n    for (var i = 0; i < range.set.length; ++i) {\r\n      var comparators = range.set[i];\r\n\r\n      var high = null;\r\n      var low = null;\r\n\r\n      comparators.forEach(function(comparator) {\r\n        high = high || comparator;\r\n        low = low || comparator;\r\n        if (gtfn(comparator.semver, high.semver, loose)) {\r\n          high = comparator;\r\n        } else if (ltfn(comparator.semver, low.semver, loose)) {\r\n          low = comparator;\r\n        }\r\n      });\r\n\r\n      // If the edge version comparator has a operator then our version\r\n      // isn't outside it\r\n      if (high.operator === comp || high.operator === ecomp) {\r\n        return false;\r\n      }\r\n\r\n      // If the lowest version comparator has an operator and our version\r\n      // is less than it then it isn't higher than the range\r\n      if ((!low.operator || low.operator === comp) &&\r\n          ltefn(version, low.semver)) {\r\n        return false;\r\n      } else if (low.operator === ecomp && ltfn(version, low.semver)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  return skylark.attach(\"intg.SemVer\",SemVer);\r\n});\r\n\ndefine('skylark-semver/main',[\r\n\t\"./SemVer\"\r\n],function(SemVer){\r\n\treturn SemVer;\r\n});\ndefine('skylark-semver', ['skylark-semver/main'], function (main) { return main; });\n\n"]}