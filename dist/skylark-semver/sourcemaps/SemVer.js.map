{"version":3,"sources":["SemVer.js"],"names":["define","skylark","exports","module","SemVer","SEMVER_SPEC_VERSION","re","src","R","NUMERICIDENTIFIER","NUMERICIDENTIFIERLOOSE","NONNUMERICIDENTIFIER","MAINVERSION","MAINVERSIONLOOSE","PRERELEASEIDENTIFIER","PRERELEASEIDENTIFIERLOOSE","PRERELEASE","PRERELEASELOOSE","BUILDIDENTIFIER","BUILD","FULL","FULLPLAIN","LOOSEPLAIN","LOOSE","GTLT","XRANGEIDENTIFIERLOOSE","XRANGEIDENTIFIER","XRANGEPLAIN","XRANGEPLAINLOOSE","XRANGE","XRANGELOOSE","LONETILDE","TILDETRIM","RegExp","TILDE","TILDELOOSE","LONECARET","CARETTRIM","CARET","CARETLOOSE","COMPARATORLOOSE","COMPARATOR","COMPARATORTRIM","HYPHENRANGE","HYPHENRANGELOOSE","STAR","i","parse","version","loose","test","TypeError","this","m","trim","match","raw","major","minor","patch","prerelease","split","map","id","build","format","valid","v","clean","s","prototype","length","join","inspect","toString","compare","other","compareMain","comparePre","compareIdentifiers","a","b","undefined","inc","release","push","Error","er","numeric","anum","bnum","rcompare","gt","lt","eq","neq","gte","lte","cmp","op","ret","Comparator","comp","value","semver","ANY","operator","rcompareIdentifiers","compareLoose","sort","list","rsort","Range","range","set","parseRange","filter","c","isX","toLowerCase","hyphenReplace","$0","from","fM","fm","fp","fpr","fb","to","tM","tm","tp","tpr","tb","testSet","satisfies","outside","hilo","gtfn","ltefn","ltfn","ecomp","high","low","forEach","comparator","r","comps","hr","replace","compRe","replaceStars","gtlt","M","p","pr","xM","xm","xp","anyX","replaceXRange","replaceXRanges","_","charAt","replaceTilde","replaceTildes","replaceCaret","replaceCarets","parseComparator","toComparators","maxSatisfying","versions","validRange","ltr","gtr","attach"],"mappings":"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","file":"../SemVer.js","sourcesContent":["define([\r\n  \"skylark-langx/skylark\"\r\n],function(skylark){\r\n   var exports = module.exports = SemVer;\r\n\r\n  // The debug function is excluded entirely from the minified version.\r\n\r\n  // Note: this is the semver.org version of the spec that it implements\r\n  // Not necessarily the package version of this code.\r\n  exports.SEMVER_SPEC_VERSION = '2.0.0';\r\n\r\n  // The actual regexps go on exports.re\r\n  var re = exports.re = [];\r\n  var src = exports.src = [];\r\n  var R = 0;\r\n\r\n  // The following Regular Expressions can be used for tokenizing,\r\n  // validating, and parsing SemVer version strings.\r\n\r\n  // ## Numeric Identifier\r\n  // A single `0`, or a non-zero digit followed by zero or more digits.\r\n\r\n  var NUMERICIDENTIFIER = R++;\r\n  src[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';\r\n  var NUMERICIDENTIFIERLOOSE = R++;\r\n  src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';\r\n\r\n\r\n  // ## Non-numeric Identifier\r\n  // Zero or more digits, followed by a letter or hyphen, and then zero or\r\n  // more letters, digits, or hyphens.\r\n\r\n  var NONNUMERICIDENTIFIER = R++;\r\n  src[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';\r\n\r\n\r\n  // ## Main Version\r\n  // Three dot-separated numeric identifiers.\r\n\r\n  var MAINVERSION = R++;\r\n  src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\r\n                     '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\r\n                     '(' + src[NUMERICIDENTIFIER] + ')';\r\n\r\n  var MAINVERSIONLOOSE = R++;\r\n  src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\r\n                          '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\r\n                          '(' + src[NUMERICIDENTIFIERLOOSE] + ')';\r\n\r\n  // ## Pre-release Version Identifier\r\n  // A numeric identifier, or a non-numeric identifier.\r\n\r\n  var PRERELEASEIDENTIFIER = R++;\r\n  src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +\r\n                              '|' + src[NONNUMERICIDENTIFIER] + ')';\r\n\r\n  var PRERELEASEIDENTIFIERLOOSE = R++;\r\n  src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +\r\n                                   '|' + src[NONNUMERICIDENTIFIER] + ')';\r\n\r\n\r\n  // ## Pre-release Version\r\n  // Hyphen, followed by one or more dot-separated pre-release version\r\n  // identifiers.\r\n\r\n  var PRERELEASE = R++;\r\n  src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +\r\n                    '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))';\r\n\r\n  var PRERELEASELOOSE = R++;\r\n  src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +\r\n                         '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';\r\n\r\n  // ## Build Metadata Identifier\r\n  // Any combination of digits, letters, or hyphens.\r\n\r\n  var BUILDIDENTIFIER = R++;\r\n  src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';\r\n\r\n  // ## Build Metadata\r\n  // Plus sign, followed by one or more period-separated build metadata\r\n  // identifiers.\r\n\r\n  var BUILD = R++;\r\n  src[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +\r\n               '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))';\r\n\r\n\r\n  // ## Full Version String\r\n  // A main version, followed optionally by a pre-release version and\r\n  // build metadata.\r\n\r\n  // Note that the only major, minor, patch, and pre-release sections of\r\n  // the version string are capturing groups.  The build metadata is not a\r\n  // capturing group, because it should not ever be used in version\r\n  // comparison.\r\n\r\n  var FULL = R++;\r\n  var FULLPLAIN = 'v?' + src[MAINVERSION] +\r\n                  src[PRERELEASE] + '?' +\r\n                  src[BUILD] + '?';\r\n\r\n  src[FULL] = '^' + FULLPLAIN + '$';\r\n\r\n  // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\r\n  // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\r\n  // common in the npm registry.\r\n  var LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +\r\n                   src[PRERELEASELOOSE] + '?' +\r\n                   src[BUILD] + '?';\r\n\r\n  var LOOSE = R++;\r\n  src[LOOSE] = '^' + LOOSEPLAIN + '$';\r\n\r\n  var GTLT = R++;\r\n  src[GTLT] = '((?:<|>)?=?)';\r\n\r\n  // Something like \"2.*\" or \"1.2.x\".\r\n  // Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\r\n  // Only the first item is strictly required.\r\n  var XRANGEIDENTIFIERLOOSE = R++;\r\n  src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';\r\n  var XRANGEIDENTIFIER = R++;\r\n  src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*';\r\n\r\n  var XRANGEPLAIN = R++;\r\n  src[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +\r\n                     '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\r\n                     '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\r\n                     '(?:(' + src[PRERELEASE] + ')' +\r\n                     ')?)?)?';\r\n\r\n  var XRANGEPLAINLOOSE = R++;\r\n  src[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\r\n                          '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\r\n                          '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\r\n                          '(?:(' + src[PRERELEASELOOSE] + ')' +\r\n                          ')?)?)?';\r\n\r\n  // >=2.x, for example, means >=2.0.0-0\r\n  // <1.x would be the same as \"<1.0.0-0\", though.\r\n  var XRANGE = R++;\r\n  src[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$';\r\n  var XRANGELOOSE = R++;\r\n  src[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$';\r\n\r\n  // Tilde ranges.\r\n  // Meaning is \"reasonably at or greater than\"\r\n  var LONETILDE = R++;\r\n  src[LONETILDE] = '(?:~>?)';\r\n\r\n  var TILDETRIM = R++;\r\n  src[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+';\r\n  re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');\r\n  var tildeTrimReplace = '$1~';\r\n\r\n  var TILDE = R++;\r\n  src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';\r\n  var TILDELOOSE = R++;\r\n  src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';\r\n\r\n  // Caret ranges.\r\n  // Meaning is \"at least and backwards compatible with\"\r\n  var LONECARET = R++;\r\n  src[LONECARET] = '(?:\\\\^)';\r\n\r\n  var CARETTRIM = R++;\r\n  src[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+';\r\n  re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');\r\n  var caretTrimReplace = '$1^';\r\n\r\n  var CARET = R++;\r\n  src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';\r\n  var CARETLOOSE = R++;\r\n  src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';\r\n\r\n  // A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\r\n  var COMPARATORLOOSE = R++;\r\n  src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$';\r\n  var COMPARATOR = R++;\r\n  src[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$';\r\n\r\n\r\n  // An expression to strip any whitespace between the gtlt and the thing\r\n  // it modifies, so that `> 1.2.3` ==> `>1.2.3`\r\n  var COMPARATORTRIM = R++;\r\n  src[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +\r\n                        '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';\r\n\r\n  // this one has to use the /g flag\r\n  re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');\r\n  var comparatorTrimReplace = '$1$2$3';\r\n\r\n\r\n  // Something like `1.2.3 - 1.2.4`\r\n  // Note that these all use the loose form, because they'll be\r\n  // checked against either the strict or loose comparator form\r\n  // later.\r\n  var HYPHENRANGE = R++;\r\n  src[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +\r\n                     '\\\\s+-\\\\s+' +\r\n                     '(' + src[XRANGEPLAIN] + ')' +\r\n                     '\\\\s*$';\r\n\r\n  var HYPHENRANGELOOSE = R++;\r\n  src[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +\r\n                          '\\\\s+-\\\\s+' +\r\n                          '(' + src[XRANGEPLAINLOOSE] + ')' +\r\n                          '\\\\s*$';\r\n\r\n  // Star ranges basically just allow anything at all.\r\n  var STAR = R++;\r\n  src[STAR] = '(<|>)?=?\\\\s*\\\\*';\r\n\r\n  // Compile to actual regexp objects.\r\n  // All are flag-free, unless they were created above with a flag.\r\n  for (var i = 0; i < R; i++) {\r\n    ;\r\n    if (!re[i])\r\n      re[i] = new RegExp(src[i]);\r\n  }\r\n\r\n  exports.parse = parse;\r\n  function parse(version, loose) {\r\n    var r = loose ? re[LOOSE] : re[FULL];\r\n    return (r.test(version)) ? new SemVer(version, loose) : null;\r\n  }\r\n\r\n  exports.valid = valid;\r\n  function valid(version, loose) {\r\n    var v = parse(version, loose);\r\n    return v ? v.version : null;\r\n  }\r\n\r\n\r\n  exports.clean = clean;\r\n  function clean(version, loose) {\r\n    var s = parse(version, loose);\r\n    return s ? s.version : null;\r\n  }\r\n\r\n  exports.SemVer = SemVer;\r\n\r\n  function SemVer(version, loose) {\r\n    if (version instanceof SemVer) {\r\n      if (version.loose === loose)\r\n        return version;\r\n      else\r\n        version = version.version;\r\n    } else if (typeof version !== 'string') {\r\n      throw new TypeError('Invalid Version: ' + version);\r\n    }\r\n\r\n    if (!(this instanceof SemVer))\r\n      return new SemVer(version, loose);\r\n\r\n    ;\r\n    this.loose = loose;\r\n    var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);\r\n\r\n    if (!m)\r\n      throw new TypeError('Invalid Version: ' + version);\r\n\r\n    this.raw = version;\r\n\r\n    // these are actually numbers\r\n    this.major = +m[1];\r\n    this.minor = +m[2];\r\n    this.patch = +m[3];\r\n\r\n    // numberify any prerelease numeric ids\r\n    if (!m[4])\r\n      this.prerelease = [];\r\n    else\r\n      this.prerelease = m[4].split('.').map(function(id) {\r\n        return (/^[0-9]+$/.test(id)) ? +id : id;\r\n      });\r\n\r\n    this.build = m[5] ? m[5].split('.') : [];\r\n    this.format();\r\n  }\r\n\r\n  SemVer.prototype.format = function() {\r\n    this.version = this.major + '.' + this.minor + '.' + this.patch;\r\n    if (this.prerelease.length)\r\n      this.version += '-' + this.prerelease.join('.');\r\n    return this.version;\r\n  };\r\n\r\n  SemVer.prototype.inspect = function() {\r\n    return '<SemVer \"' + this + '\">';\r\n  };\r\n\r\n  SemVer.prototype.toString = function() {\r\n    return this.version;\r\n  };\r\n\r\n  SemVer.prototype.compare = function(other) {\r\n    ;\r\n    if (!(other instanceof SemVer))\r\n      other = new SemVer(other, this.loose);\r\n\r\n    return this.compareMain(other) || this.comparePre(other);\r\n  };\r\n\r\n  SemVer.prototype.compareMain = function(other) {\r\n    if (!(other instanceof SemVer))\r\n      other = new SemVer(other, this.loose);\r\n\r\n    return compareIdentifiers(this.major, other.major) ||\r\n           compareIdentifiers(this.minor, other.minor) ||\r\n           compareIdentifiers(this.patch, other.patch);\r\n  };\r\n\r\n  SemVer.prototype.comparePre = function(other) {\r\n    if (!(other instanceof SemVer))\r\n      other = new SemVer(other, this.loose);\r\n\r\n    // NOT having a prerelease is > having one\r\n    if (this.prerelease.length && !other.prerelease.length)\r\n      return -1;\r\n    else if (!this.prerelease.length && other.prerelease.length)\r\n      return 1;\r\n    else if (!this.prerelease.length && !other.prerelease.length)\r\n      return 0;\r\n\r\n    var i = 0;\r\n    do {\r\n      var a = this.prerelease[i];\r\n      var b = other.prerelease[i];\r\n      ;\r\n      if (a === undefined && b === undefined)\r\n        return 0;\r\n      else if (b === undefined)\r\n        return 1;\r\n      else if (a === undefined)\r\n        return -1;\r\n      else if (a === b)\r\n        continue;\r\n      else\r\n        return compareIdentifiers(a, b);\r\n    } while (++i);\r\n  };\r\n\r\n  // preminor will bump the version up to the next minor release, and immediately\r\n  // down to pre-release. premajor and prepatch work the same way.\r\n  SemVer.prototype.inc = function(release) {\r\n    switch (release) {\r\n      case 'premajor':\r\n        this.inc('major');\r\n        this.inc('pre');\r\n        break;\r\n      case 'preminor':\r\n        this.inc('minor');\r\n        this.inc('pre');\r\n        break;\r\n      case 'prepatch':\r\n        // If this is already a prerelease, it will bump to the next version\r\n        // drop any prereleases that might already exist, since they are not\r\n        // relevant at this point.\r\n        this.prerelease.length = 0\r\n        this.inc('patch');\r\n        this.inc('pre');\r\n        break;\r\n      // If the input is a non-prerelease version, this acts the same as\r\n      // prepatch.\r\n      case 'prerelease':\r\n        if (this.prerelease.length === 0)\r\n          this.inc('patch');\r\n        this.inc('pre');\r\n        break;\r\n      case 'major':\r\n        this.major++;\r\n        this.minor = -1;\r\n      case 'minor':\r\n        this.minor++;\r\n        this.patch = 0;\r\n        this.prerelease = [];\r\n        break;\r\n      case 'patch':\r\n        // If this is not a pre-release version, it will increment the patch.\r\n        // If it is a pre-release it will bump up to the same patch version.\r\n        // 1.2.0-5 patches to 1.2.0\r\n        // 1.2.0 patches to 1.2.1\r\n        if (this.prerelease.length === 0)\r\n          this.patch++;\r\n        this.prerelease = [];\r\n        break;\r\n      // This probably shouldn't be used publically.\r\n      // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\r\n      case 'pre':\r\n        if (this.prerelease.length === 0)\r\n          this.prerelease = [0];\r\n        else {\r\n          var i = this.prerelease.length;\r\n          while (--i >= 0) {\r\n            if (typeof this.prerelease[i] === 'number') {\r\n              this.prerelease[i]++;\r\n              i = -2;\r\n            }\r\n          }\r\n          if (i === -1) // didn't increment anything\r\n            this.prerelease.push(0);\r\n        }\r\n        break;\r\n\r\n      default:\r\n        throw new Error('invalid increment argument: ' + release);\r\n    }\r\n    this.format();\r\n    return this;\r\n  };\r\n\r\n  exports.inc = inc;\r\n  function inc(version, release, loose) {\r\n    try {\r\n      return new SemVer(version, loose).inc(release).version;\r\n    } catch (er) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  exports.compareIdentifiers = compareIdentifiers;\r\n\r\n  var numeric = /^[0-9]+$/;\r\n  function compareIdentifiers(a, b) {\r\n    var anum = numeric.test(a);\r\n    var bnum = numeric.test(b);\r\n\r\n    if (anum && bnum) {\r\n      a = +a;\r\n      b = +b;\r\n    }\r\n\r\n    return (anum && !bnum) ? -1 :\r\n           (bnum && !anum) ? 1 :\r\n           a < b ? -1 :\r\n           a > b ? 1 :\r\n           0;\r\n  }\r\n\r\n  exports.rcompareIdentifiers = rcompareIdentifiers;\r\n  function rcompareIdentifiers(a, b) {\r\n    return compareIdentifiers(b, a);\r\n  }\r\n\r\n  exports.compare = compare;\r\n  function compare(a, b, loose) {\r\n    return new SemVer(a, loose).compare(b);\r\n  }\r\n\r\n  exports.compareLoose = compareLoose;\r\n  function compareLoose(a, b) {\r\n    return compare(a, b, true);\r\n  }\r\n\r\n  exports.rcompare = rcompare;\r\n  function rcompare(a, b, loose) {\r\n    return compare(b, a, loose);\r\n  }\r\n\r\n  exports.sort = sort;\r\n  function sort(list, loose) {\r\n    return list.sort(function(a, b) {\r\n      return exports.compare(a, b, loose);\r\n    });\r\n  }\r\n\r\n  exports.rsort = rsort;\r\n  function rsort(list, loose) {\r\n    return list.sort(function(a, b) {\r\n      return exports.rcompare(a, b, loose);\r\n    });\r\n  }\r\n\r\n  exports.gt = gt;\r\n  function gt(a, b, loose) {\r\n    return compare(a, b, loose) > 0;\r\n  }\r\n\r\n  exports.lt = lt;\r\n  function lt(a, b, loose) {\r\n    return compare(a, b, loose) < 0;\r\n  }\r\n\r\n  exports.eq = eq;\r\n  function eq(a, b, loose) {\r\n    return compare(a, b, loose) === 0;\r\n  }\r\n\r\n  exports.neq = neq;\r\n  function neq(a, b, loose) {\r\n    return compare(a, b, loose) !== 0;\r\n  }\r\n\r\n  exports.gte = gte;\r\n  function gte(a, b, loose) {\r\n    return compare(a, b, loose) >= 0;\r\n  }\r\n\r\n  exports.lte = lte;\r\n  function lte(a, b, loose) {\r\n    return compare(a, b, loose) <= 0;\r\n  }\r\n\r\n  exports.cmp = cmp;\r\n  function cmp(a, op, b, loose) {\r\n    var ret;\r\n    switch (op) {\r\n      case '===': ret = a === b; break;\r\n      case '!==': ret = a !== b; break;\r\n      case '': case '=': case '==': ret = eq(a, b, loose); break;\r\n      case '!=': ret = neq(a, b, loose); break;\r\n      case '>': ret = gt(a, b, loose); break;\r\n      case '>=': ret = gte(a, b, loose); break;\r\n      case '<': ret = lt(a, b, loose); break;\r\n      case '<=': ret = lte(a, b, loose); break;\r\n      default: throw new TypeError('Invalid operator: ' + op);\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  exports.Comparator = Comparator;\r\n  function Comparator(comp, loose) {\r\n    if (comp instanceof Comparator) {\r\n      if (comp.loose === loose)\r\n        return comp;\r\n      else\r\n        comp = comp.value;\r\n    }\r\n\r\n    if (!(this instanceof Comparator))\r\n      return new Comparator(comp, loose);\r\n\r\n    ;\r\n    this.loose = loose;\r\n    this.parse(comp);\r\n\r\n    if (this.semver === ANY)\r\n      this.value = '';\r\n    else\r\n      this.value = this.operator + this.semver.version;\r\n  }\r\n\r\n  var ANY = {};\r\n  Comparator.prototype.parse = function(comp) {\r\n    var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\r\n    var m = comp.match(r);\r\n\r\n    if (!m)\r\n      throw new TypeError('Invalid comparator: ' + comp);\r\n\r\n    this.operator = m[1];\r\n    if (this.operator === '=')\r\n      this.operator = '';\r\n\r\n    // if it literally is just '>' or '' then allow anything.\r\n    if (!m[2])\r\n      this.semver = ANY;\r\n    else {\r\n      this.semver = new SemVer(m[2], this.loose);\r\n\r\n      // <1.2.3-rc DOES allow 1.2.3-beta (has prerelease)\r\n      // >=1.2.3 DOES NOT allow 1.2.3-beta\r\n      // <=1.2.3 DOES allow 1.2.3-beta\r\n      // However, <1.2.3 does NOT allow 1.2.3-beta,\r\n      // even though `1.2.3-beta < 1.2.3`\r\n      // The assumption is that the 1.2.3 version has something you\r\n      // *don't* want, so we push the prerelease down to the minimum.\r\n      if (this.operator === '<' && !this.semver.prerelease.length) {\r\n        this.semver.prerelease = ['0'];\r\n        this.semver.format();\r\n      }\r\n    }\r\n  };\r\n\r\n  Comparator.prototype.inspect = function() {\r\n    return '<SemVer Comparator \"' + this + '\">';\r\n  };\r\n\r\n  Comparator.prototype.toString = function() {\r\n    return this.value;\r\n  };\r\n\r\n  Comparator.prototype.test = function(version) {\r\n    ;\r\n    return (this.semver === ANY) ? true :\r\n           cmp(version, this.operator, this.semver, this.loose);\r\n  };\r\n\r\n\r\n  exports.Range = Range;\r\n  function Range(range, loose) {\r\n    if ((range instanceof Range) && range.loose === loose)\r\n      return range;\r\n\r\n    if (!(this instanceof Range))\r\n      return new Range(range, loose);\r\n\r\n    this.loose = loose;\r\n\r\n    // First, split based on boolean or ||\r\n    this.raw = range;\r\n    this.set = range.split(/\\s*\\|\\|\\s*/).map(function(range) {\r\n      return this.parseRange(range.trim());\r\n    }, this).filter(function(c) {\r\n      // throw out any that are not relevant for whatever reason\r\n      return c.length;\r\n    });\r\n\r\n    if (!this.set.length) {\r\n      throw new TypeError('Invalid SemVer Range: ' + range);\r\n    }\r\n\r\n    this.format();\r\n  }\r\n\r\n  Range.prototype.inspect = function() {\r\n    return '<SemVer Range \"' + this.range + '\">';\r\n  };\r\n\r\n  Range.prototype.format = function() {\r\n    this.range = this.set.map(function(comps) {\r\n      return comps.join(' ').trim();\r\n    }).join('||').trim();\r\n    return this.range;\r\n  };\r\n\r\n  Range.prototype.toString = function() {\r\n    return this.range;\r\n  };\r\n\r\n  Range.prototype.parseRange = function(range) {\r\n    var loose = this.loose;\r\n    range = range.trim();\r\n    ;\r\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\r\n    var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];\r\n    range = range.replace(hr, hyphenReplace);\r\n    ;\r\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\r\n    range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);\r\n    ;\r\n\r\n    // `~ 1.2.3` => `~1.2.3`\r\n    range = range.replace(re[TILDETRIM], tildeTrimReplace);\r\n\r\n    // `^ 1.2.3` => `^1.2.3`\r\n    range = range.replace(re[CARETTRIM], caretTrimReplace);\r\n\r\n    // normalize spaces\r\n    range = range.split(/\\s+/).join(' ');\r\n\r\n    // At this point, the range is completely trimmed and\r\n    // ready to be split into comparators.\r\n\r\n    var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\r\n    var set = range.split(' ').map(function(comp) {\r\n      return parseComparator(comp, loose);\r\n    }).join(' ').split(/\\s+/);\r\n    if (this.loose) {\r\n      // in loose mode, throw out any that are not valid comparators\r\n      set = set.filter(function(comp) {\r\n        return !!comp.match(compRe);\r\n      });\r\n    }\r\n    set = set.map(function(comp) {\r\n      return new Comparator(comp, loose);\r\n    });\r\n\r\n    return set;\r\n  };\r\n\r\n  // Mostly just for testing and legacy API reasons\r\n  exports.toComparators = toComparators;\r\n  function toComparators(range, loose) {\r\n    return new Range(range, loose).set.map(function(comp) {\r\n      return comp.map(function(c) {\r\n        return c.value;\r\n      }).join(' ').trim().split(' ');\r\n    });\r\n  }\r\n\r\n  // comprised of xranges, tildes, stars, and gtlt's at this point.\r\n  // already replaced the hyphen ranges\r\n  // turn into a set of JUST comparators.\r\n  function parseComparator(comp, loose) {\r\n    ;\r\n    comp = replaceCarets(comp, loose);\r\n    ;\r\n    comp = replaceTildes(comp, loose);\r\n    ;\r\n    comp = replaceXRanges(comp, loose);\r\n    ;\r\n    comp = replaceStars(comp, loose);\r\n    ;\r\n    return comp;\r\n  }\r\n\r\n  function isX(id) {\r\n    return !id || id.toLowerCase() === 'x' || id === '*';\r\n  }\r\n\r\n  // ~, ~> --> * (any, kinda silly)\r\n  // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\r\n  // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\r\n  // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\r\n  // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\r\n  // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\r\n  function replaceTildes(comp, loose) {\r\n    return comp.trim().split(/\\s+/).map(function(comp) {\r\n      return replaceTilde(comp, loose);\r\n    }).join(' ');\r\n  }\r\n\r\n  function replaceTilde(comp, loose) {\r\n    var r = loose ? re[TILDELOOSE] : re[TILDE];\r\n    return comp.replace(r, function(_, M, m, p, pr) {\r\n      ;\r\n      var ret;\r\n\r\n      if (isX(M))\r\n        ret = '';\r\n      else if (isX(m))\r\n        ret = '>=' + M + '.0.0-0 <' + (+M + 1) + '.0.0-0';\r\n      else if (isX(p))\r\n        // ~1.2 == >=1.2.0- <1.3.0-\r\n        ret = '>=' + M + '.' + m + '.0-0 <' + M + '.' + (+m + 1) + '.0-0';\r\n      else if (pr) {\r\n        ;\r\n        if (pr.charAt(0) !== '-')\r\n          pr = '-' + pr;\r\n        ret = '>=' + M + '.' + m + '.' + p + pr +\r\n              ' <' + M + '.' + (+m + 1) + '.0-0';\r\n      } else\r\n        // ~1.2.3 == >=1.2.3-0 <1.3.0-0\r\n        ret = '>=' + M + '.' + m + '.' + p + '-0' +\r\n              ' <' + M + '.' + (+m + 1) + '.0-0';\r\n\r\n      ;\r\n      return ret;\r\n    });\r\n  }\r\n\r\n  // ^ --> * (any, kinda silly)\r\n  // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\r\n  // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\r\n  // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\r\n  // ^1.2.3 --> >=1.2.3 <2.0.0\r\n  // ^1.2.0 --> >=1.2.0 <2.0.0\r\n  function replaceCarets(comp, loose) {\r\n    return comp.trim().split(/\\s+/).map(function(comp) {\r\n      return replaceCaret(comp, loose);\r\n    }).join(' ');\r\n  }\r\n\r\n  function replaceCaret(comp, loose) {\r\n    var r = loose ? re[CARETLOOSE] : re[CARET];\r\n    return comp.replace(r, function(_, M, m, p, pr) {\r\n      ;\r\n      var ret;\r\n\r\n      if (isX(M))\r\n        ret = '';\r\n      else if (isX(m))\r\n        ret = '>=' + M + '.0.0-0 <' + (+M + 1) + '.0.0-0';\r\n      else if (isX(p)) {\r\n        if (M === '0')\r\n          ret = '>=' + M + '.' + m + '.0-0 <' + M + '.' + (+m + 1) + '.0-0';\r\n        else\r\n          ret = '>=' + M + '.' + m + '.0-0 <' + (+M + 1) + '.0.0-0';\r\n      } else if (pr) {\r\n        ;\r\n        if (pr.charAt(0) !== '-')\r\n          pr = '-' + pr;\r\n        if (M === '0') {\r\n          if (m === '0')\r\n            ret = '=' + M + '.' + m + '.' + p + pr;\r\n          else\r\n            ret = '>=' + M + '.' + m + '.' + p + pr +\r\n                  ' <' + M + '.' + (+m + 1) + '.0-0';\r\n        } else\r\n          ret = '>=' + M + '.' + m + '.' + p + pr +\r\n                ' <' + (+M + 1) + '.0.0-0';\r\n      } else {\r\n        if (M === '0') {\r\n          if (m === '0')\r\n            ret = '=' + M + '.' + m + '.' + p;\r\n          else\r\n            ret = '>=' + M + '.' + m + '.' + p + '-0' +\r\n                  ' <' + M + '.' + (+m + 1) + '.0-0';\r\n        } else\r\n          ret = '>=' + M + '.' + m + '.' + p + '-0' +\r\n                ' <' + (+M + 1) + '.0.0-0';\r\n      }\r\n\r\n      ;\r\n      return ret;\r\n    });\r\n  }\r\n\r\n  function replaceXRanges(comp, loose) {\r\n    ;\r\n    return comp.split(/\\s+/).map(function(comp) {\r\n      return replaceXRange(comp, loose);\r\n    }).join(' ');\r\n  }\r\n\r\n  function replaceXRange(comp, loose) {\r\n    comp = comp.trim();\r\n    var r = loose ? re[XRANGELOOSE] : re[XRANGE];\r\n    return comp.replace(r, function(ret, gtlt, M, m, p, pr) {\r\n      ;\r\n      var xM = isX(M);\r\n      var xm = xM || isX(m);\r\n      var xp = xm || isX(p);\r\n      var anyX = xp;\r\n\r\n      if (gtlt === '=' && anyX)\r\n        gtlt = '';\r\n\r\n      if (gtlt && anyX) {\r\n        // replace X with 0, and then append the -0 min-prerelease\r\n        if (xM)\r\n          M = 0;\r\n        if (xm)\r\n          m = 0;\r\n        if (xp)\r\n          p = 0;\r\n\r\n        if (gtlt === '>') {\r\n          // >1 => >=2.0.0-0\r\n          // >1.2 => >=1.3.0-0\r\n          // >1.2.3 => >= 1.2.4-0\r\n          gtlt = '>=';\r\n          if (xM) {\r\n            // no change\r\n          } else if (xm) {\r\n            M = +M + 1;\r\n            m = 0;\r\n            p = 0;\r\n          } else if (xp) {\r\n            m = +m + 1;\r\n            p = 0;\r\n          }\r\n        }\r\n\r\n\r\n        ret = gtlt + M + '.' + m + '.' + p + '-0';\r\n      } else if (xM) {\r\n        // allow any\r\n        ret = '*';\r\n      } else if (xm) {\r\n        // append '-0' onto the version, otherwise\r\n        // '1.x.x' matches '2.0.0-beta', since the tag\r\n        // *lowers* the version value\r\n        ret = '>=' + M + '.0.0-0 <' + (+M + 1) + '.0.0-0';\r\n      } else if (xp) {\r\n        ret = '>=' + M + '.' + m + '.0-0 <' + M + '.' + (+m + 1) + '.0-0';\r\n      }\r\n\r\n      ;\r\n\r\n      return ret;\r\n    });\r\n  }\r\n\r\n  // Because * is AND-ed with everything else in the comparator,\r\n  // and '' means \"any version\", just remove the *s entirely.\r\n  function replaceStars(comp, loose) {\r\n    ;\r\n    // Looseness is ignored here.  star is always as loose as it gets!\r\n    return comp.trim().replace(re[STAR], '');\r\n  }\r\n\r\n  // This function is passed to string.replace(re[HYPHENRANGE])\r\n  // M, m, patch, prerelease, build\r\n  // 1.2 - 3.4.5 => >=1.2.0-0 <=3.4.5\r\n  // 1.2.3 - 3.4 => >=1.2.0-0 <3.5.0-0 Any 3.4.x will do\r\n  // 1.2 - 3.4 => >=1.2.0-0 <3.5.0-0\r\n  function hyphenReplace($0,\r\n                         from, fM, fm, fp, fpr, fb,\r\n                         to, tM, tm, tp, tpr, tb) {\r\n\r\n    if (isX(fM))\r\n      from = '';\r\n    else if (isX(fm))\r\n      from = '>=' + fM + '.0.0-0';\r\n    else if (isX(fp))\r\n      from = '>=' + fM + '.' + fm + '.0-0';\r\n    else\r\n      from = '>=' + from;\r\n\r\n    if (isX(tM))\r\n      to = '';\r\n    else if (isX(tm))\r\n      to = '<' + (+tM + 1) + '.0.0-0';\r\n    else if (isX(tp))\r\n      to = '<' + tM + '.' + (+tm + 1) + '.0-0';\r\n    else if (tpr)\r\n      to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;\r\n    else\r\n      to = '<=' + to;\r\n\r\n    return (from + ' ' + to).trim();\r\n  }\r\n\r\n\r\n  // if ANY of the sets match ALL of its comparators, then pass\r\n  Range.prototype.test = function(version) {\r\n    if (!version)\r\n      return false;\r\n    for (var i = 0; i < this.set.length; i++) {\r\n      if (testSet(this.set[i], version))\r\n        return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  function testSet(set, version) {\r\n    for (var i = 0; i < set.length; i++) {\r\n      if (!set[i].test(version))\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  exports.satisfies = satisfies;\r\n  function satisfies(version, range, loose) {\r\n    try {\r\n      range = new Range(range, loose);\r\n    } catch (er) {\r\n      return false;\r\n    }\r\n    return range.test(version);\r\n  }\r\n\r\n  exports.maxSatisfying = maxSatisfying;\r\n  function maxSatisfying(versions, range, loose) {\r\n    return versions.filter(function(version) {\r\n      return satisfies(version, range, loose);\r\n    }).sort(function(a, b) {\r\n      return rcompare(a, b, loose);\r\n    })[0] || null;\r\n  }\r\n\r\n  exports.validRange = validRange;\r\n  function validRange(range, loose) {\r\n    try {\r\n      // Return '*' instead of '' so that truthiness works.\r\n      // This will throw if it's invalid anyway\r\n      return new Range(range, loose).range || '*';\r\n    } catch (er) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Determine if version is less than all the versions possible in the range\r\n  exports.ltr = ltr;\r\n  function ltr(version, range, loose) {\r\n    return outside(version, range, '<', loose);\r\n  }\r\n\r\n  // Determine if version is greater than all the versions possible in the range.\r\n  exports.gtr = gtr;\r\n  function gtr(version, range, loose) {\r\n    return outside(version, range, '>', loose);\r\n  }\r\n\r\n  exports.outside = outside;\r\n  function outside(version, range, hilo, loose) {\r\n    version = new SemVer(version, loose);\r\n    range = new Range(range, loose);\r\n\r\n    var gtfn, ltefn, ltfn, comp, ecomp;\r\n    switch (hilo) {\r\n      case '>':\r\n        gtfn = gt;\r\n        ltefn = lte;\r\n        ltfn = lt;\r\n        comp = '>';\r\n        ecomp = '>=';\r\n        break;\r\n      case '<':\r\n        gtfn = lt;\r\n        ltefn = gte;\r\n        ltfn = gt;\r\n        comp = '<';\r\n        ecomp = '<=';\r\n        break;\r\n      default:\r\n        throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\r\n    }\r\n\r\n    // If it satisifes the range it is not outside\r\n    if (satisfies(version, range, loose)) {\r\n      return false;\r\n    }\r\n\r\n    // From now on, variable terms are as if we're in \"gtr\" mode.\r\n    // but note that everything is flipped for the \"ltr\" function.\r\n\r\n    for (var i = 0; i < range.set.length; ++i) {\r\n      var comparators = range.set[i];\r\n\r\n      var high = null;\r\n      var low = null;\r\n\r\n      comparators.forEach(function(comparator) {\r\n        high = high || comparator;\r\n        low = low || comparator;\r\n        if (gtfn(comparator.semver, high.semver, loose)) {\r\n          high = comparator;\r\n        } else if (ltfn(comparator.semver, low.semver, loose)) {\r\n          low = comparator;\r\n        }\r\n      });\r\n\r\n      // If the edge version comparator has a operator then our version\r\n      // isn't outside it\r\n      if (high.operator === comp || high.operator === ecomp) {\r\n        return false;\r\n      }\r\n\r\n      // If the lowest version comparator has an operator and our version\r\n      // is less than it then it isn't higher than the range\r\n      if ((!low.operator || low.operator === comp) &&\r\n          ltefn(version, low.semver)) {\r\n        return false;\r\n      } else if (low.operator === ecomp && ltfn(version, low.semver)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  return skylark.attach(\"intg.SemVer\",SemVer);\r\n});\r\n"]}